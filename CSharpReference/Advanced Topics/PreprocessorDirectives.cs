#define DEBUG
#define VC_V10          //for defining preprocessor directive
#undef VC_V10           //for undefining preprocessor directive

using System;
using System.Collections.Generic;
using System.Text;
namespace CSharpReference.Advanced_Topics
{

    class PreprocessorDirectives
    {
        public void TestPreprocessorDirectives()
        {
            #if (DEBUG && !VC_V10)
                Console.WriteLine("DEBUG is defined");

#elif (!DEBUG && VC_V10)
                Console.WriteLine("VC_V10 is defined");
#elif (DEBUG && VC_V10)
                Console.WriteLine("DEBUG and VC_V10 are defined");
#else
                Console.WriteLine("DEBUG and VC_V10 are not defined");
#endif

            //this directive generates a user defined level one warning from the code.
            #warning this is a warning message          

            //#error This is an error message             //this directive generates a user defined error from the code

            #line 200 "Program.cs"                      //this directive modifies the line anumber and the filename for errors and warnings.
            #warning Actual Warning generated by PreprocessorDirectives.cs on line 28

            //this directive allows us to create a region that can be expanded or collapsed when using a Visual Studio Code Editor.
            //This directive is simply used to organize the code.
            //The #region block can not overlap with a #if block. However, a #region block can be included within a #if block and a #if block can overlap with a #region block.
            //#endregion directive indicates the end of a #region block.
            #region Hello
            Console.WriteLine("Hello");
            Console.WriteLine("Hello");
            Console.WriteLine("Hello");
            Console.WriteLine("Hello");
            Console.WriteLine("Hello");
            #endregion


            
            //This directive is used to give the compiler some special instructions for the compilation of the file in which it appears.
            //The instruction may include disabling or enabling some warnings.
            //C# supports two #pragma instructions:
            //#pragma warning: Used for disabling or enabling warnings
            //#pragma checksum: It generates checksums for source files which will be used for debugging.
            #pragma warning disable
            #warning This is a warning 1
            #pragma warning restore
            #warning This is a warning 2


        }
    }
}
